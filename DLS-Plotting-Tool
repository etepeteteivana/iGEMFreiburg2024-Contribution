import pandas as pd                             # provides code for data analysis 
import matplotlib.pyplot as plt                 # matplotlip provides code for creating visualizations 
import numpy as np                              # provides advanced mathematical functions 
from io import StringIO                         # reads and writes eads and writes  string buffer (memory files)

#pre-processing data
def _clean_values(values: list) -> list[str]:
    return [str(x).replace(",", ".") for x in values]

# import .csv file
# paste file path after filename 

def import_values():
    filename = "file_path"                     
    df = pd.read_csv(filename, delimiter=';').T

    # This index is chosen specifically for the list imported
    # If we want to generalize this function, we need to adjust this index accordingly.
    values = []

    # Iterate over all extrusion measurements
    for i in range(len(df.keys())):

    # the rows and columns for intensities and sizes are selected in the table
        intensities = _clean_values(df[i][77:147])
        sizes = _clean_values(df[i][7:77])
        values.append([intensities, sizes])
    
    # Combine them into a big array
    # values = np.array([intensities, sizes], dtype=float)
    return df, np.array(values, dtype=float)

def plot_measurement_distributions(
        df,
        values,
        show_measurements: 

            # first p measurements will be plotted 
            # define p
            list[int] = list(range(p)),
        acceptance_band: tuple[float, float] | None = None,
        save_plot: bool = True,
    ):
    # your value for p
    fig, ax = plt.subplots(p, figsize= (8,6), sharex=True)

    # Iterate over all measurements and generate individual curves for each one of them
    colors = ['#06D7FC', '#FBD604', '#F51889', '#ff671c', '#d000ff','#111199','#57fb04','#0496fb']
    for i in show_measurements:
        ax[i].plot(values[i,1], values[i,0],color = colors[i], label=list(df.T["Sample Name"])[i])

        # Show vertical lines for where the acceptance values are
        if acceptance_band is not None:
            x = [max(0, acceptance_band[0]), min(acceptance_band[1], np.max(values[0,1]))]
            y = [np.max(values[:,0]), np.max(values[:,0])]
        
        ax[i].fill_between(x, y, 0, color="slategrey", alpha=0.2)

        ax[i].legend(loc='upper left')
        ax[i].set_xlabel("Size [nm]")
        ax[i].set_ylabel("Intensity [%]")
        ax[i].set_xscale("log")
    fig.tight_layout()
    fig.subplots_adjust(hspace=0)
    if save_plot:
        fig.savefig("measurements-distributions.png")
    plt.show()


# acceptance band fitting 
def calculate_acceptance_band_area(x_low, x_high, values):
    acceptance_values = []
    for i in range(values.shape[0]):
        # Filter lower and larger values
        filt1 = values[i,1] <= x_high
        filt2 = values[i,1] >= x_low
        # Combine them to only yield results when both filters do apply
        # create a square of acceptance band; intervall 
        filt = filt1*filt2

        # Sum over the intensities to obtain percentage of points inside acceptable band
        acceptance_values.append(np.sum(values[i,0,filt]))
    return np.array(acceptance_values)

def plot_yield(acceptance_values, do_fit=True, save_plot: bool = True):
    fig, ax = plt.subplots(figsize=(8, 6))
    
    ax.plot(acceptance_values, color = 'magenta')

    if do_fit:
        from scipy.optimize import curve_fit
        def fit_func(x, A, λ, c):
            return A*(1 - np.exp(-λ*x)) + c
        x_values = np.arange(len(acceptance_values))
        y_values = acceptance_values
        popt, pcov = curve_fit(fit_func, x_values, y_values, absolute_sigma=True)
        perr = np.sqrt(np.diag(pcov))
        ax.plot(
            x_values,
            fit_func(x_values, *popt),
            # your value for p
            label="\
                Exponential Growth $A(1-\exp(-\lambda n))+c$\n\
                Fit: A={:p.2f} $\lambda$={:p.2f} c={:p.2f}\n\
                Errors: $\Delta A=${:p.2f} $\Delta\lambda=${:p.2f} $\Delta c=${:p.2f}"
                .format(*popt, *perr),
                color = 'blue'
        )

    plt.xticks( np.arange(15) )

    locs, labels = plt.xticks()
    print(locs, labels) 
# name axes, edit legend 
    ax.legend()
    ax.set_xlabel("Extrusion Number")
    ax.set_ylabel("Acceptable Yield [%]")
    if save_plot:
        fig.savefig("accepted-yield.png")
    plt.show()

if __name__ == "__main__":
    df, values = import_values()
    # define minimal and maximal size of your lipid-based nanocarriers 
    x_low = 175                                 # minimal size
    x_high = 225                                # maximal size 

    plot_measurement_distributions(df, values, acceptance_band=(x_low, x_high))
    acceptance_values = calculate_acceptance_band_area(x_low, x_high, values)
    plot_yield(acceptance_values)

print()
